# datasource
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5433/transacoes}
spring.datasource.username=${DB_USER:postgres}
spring.datasource.password=${DB_PASS:123}

# jpa
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#spring.datasource.platform=postgres
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.format_sql=true

# kafka - endereço
spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost:9092}

# kafka - formato da chave (String) recebida!
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# kafka - formato da mensagem \ evento (JSON) recebida(o)!
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# kafka - identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:minha-aplicacao}

# kafka - modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}

# kafka - nome do tópico
spring.kafka.topic.transactions=${KAFKA_TOPIC:transacoes}

# spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/transacoes}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/transacoes/protocol/openid-connect/certs}


